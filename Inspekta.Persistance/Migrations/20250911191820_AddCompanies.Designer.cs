// <auto-generated />
using System;
using Inspekta.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Inspekta.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250911191820_AddCompanies")]
    partial class AddCompanies
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Inspekta.Persistance.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("NIP")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Town")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(6)
                        .HasColumnType("char(6)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            ModifiedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Inspekta sp. z o. o."
                        });
                });

            modelBuilder.Entity("Inspekta.Persistance.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("PassHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CompanyId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            Login = "Inspekta",
                            ModifiedAt = new DateTime(2025, 9, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            PassHash = "1ad8a4c6fa0a84514f1f1fc92b6e16130233a571764db6c5bae8413d1e33957f",
                            Role = 0,
                            Salt = "RtK3gvva4x7jPnjb"
                        });
                });

            modelBuilder.Entity("Inspekta.Persistance.Entities.User", b =>
                {
                    b.HasOne("Inspekta.Persistance.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Inspekta.Persistance.Entities.Company", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
