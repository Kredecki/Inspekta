@page "/users"
@attribute [Authorize(Policy = "AdminPolicy")]

<div id="main-container" @onkeydown="OnKeyDown">
	<header>
		<div id="header-first-container">
			<div class="search-input">
				<span class="material-symbols-outlined">search</span>
				<input type="text" placeholder="Wyszukaj" @bind=SearchTerm @oninput="OnSearchAsync" />
			</div>
		</div>
		<div id="header-second-container">
			<select @onchange=OnRecordsPerPageChangeAsync>
				<option value="10">Pokaż 10 wyników</option>
				<option value="20">Pokaż 20 wyników</option>
				<option value="50">Pokaż 50 wyników</option>
				<option value="100">Pokaż 100 wyników</option>
			</select>
			<button type="button" @onclick="@(() => Navigation.NavigateTo($"/user?IsReadOnly=false"))">Dodaj</button>
		</div>
	</header>
	<table>
		<thead>
			<tr>
				<th>
					Lp
					<span class="material-symbols-outlined"
						  @onclick="@(() => SortBy(SortColumn.Id))">
						@GetSortIcon(SortColumn.Id)
					</span>
				</th>
				<th>
					Login
					<span class="material-symbols-outlined"
						  @onclick="@(() => SortBy(SortColumn.Login))">
						@GetSortIcon(SortColumn.Login)
					</span>
				</th>
				<th>
					Rola
					<span class="material-symbols-outlined"
						  @onclick="@(() => SortBy(SortColumn.Role))">
						@GetSortIcon(SortColumn.Role)
					</span>
				</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in FilteredModel)
			{
				int lp = 1;
				<tr @ondblclick="@(() => Details(item.Id))">
					<td>@lp</td>
					<td>@item.Login</td>
					<td>@item.Role</td>
				</tr>
			}
		</tbody>
	</table>
	<footer>
		@if (CurrentPage - 1 >= 0)
		{
			<span @onclick="@(() => ChangePageAsync(CurrentPage - 1))">
				<span class="material-symbols-outlined">
					arrow_back_ios
				</span>
				Poprzednia
			</span>
		}
		else
		{
			<span class="disabled">
				<span class="material-symbols-outlined">
					arrow_back_ios
				</span>
				Poprzednia
			</span>
		}
		<div class="pagger">
			@if (CurrentPage - 2 > 0)
			{
				<span @onclick="@(() => ChangePageAsync(0))">...</span>
			}

			@for (int i = Math.Max(CurrentPage - 2, 0); i <= Math.Min(CurrentPage + 2, Pages - 1); i++)
			{
				int index = i;
				<span class="@(index == CurrentPage ? "active" : "")"
					  @onclick=@(() => ChangePageAsync(index))>
					@(index + 1)
				</span>
			}

			@if (CurrentPage + 2 < Pages - 1)
			{
				<span @onclick="@(() => ChangePageAsync(Pages - 1))">...</span>
			}
		</div>
		@if (CurrentPage + 1 <= Pages - 1)
		{
			<span @onclick="@(() => ChangePageAsync(CurrentPage + 1))">
				Następna
				<span class="material-symbols-outlined">
					arrow_forward_ios
				</span>
			</span>
		}
		else
		{
			<span class="disabled">
				Następna
				<span class="material-symbols-outlined">
					arrow_forward_ios
				</span>
			</span>
		}
	</footer>
</div>